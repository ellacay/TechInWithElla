{"ast":null,"code":"var _jsxFileName = \"/Users/23miec/Projects/TechInWithElla/techinwithella/src/MainPages/Post.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport ReactMarkdown from \"react-markdown\";\nimport MuiAlert from \"@mui/material/Alert\";\nimport { BrowserRouter as Router, useParams } from \"react-router-dom\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport { set } from \"@firebase/database\";\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport FavoriteBorderIcon from '@mui/icons-material/FavoriteBorder';\nimport axios from \"axios\";\nimport AddIcon from '@mui/icons-material/Add';\nimport IconButton from '@mui/material/IconButton';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Button } from \"@material-ui/core\";\nimport Divider from '@mui/material/Divider';\nimport ArrowForwardIcon from '@mui/icons-material/ArrowForward';\nimport { styled } from '@mui/material/styles';\nimport MuiGrid from '@mui/material/Grid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Grid = styled(MuiGrid)(_ref => {\n  let {\n    theme\n  } = _ref;\n  return {\n    width: '100%',\n    ...theme.typography.body2,\n    '& [role=\"separator\"]': {\n      margin: theme.spacing(0, 2)\n    }\n  };\n});\n\nconst Post = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  let {\n    id\n  } = useParams();\n  const [post, setPost] = React.useState([]);\n  const [title, setTitle] = useState(\"\");\n  const [desc, setDesc] = useState(\"\");\n  const [postId, setPostId] = React.useState(\"\");\n  useEffect(() => {\n    const getPost = async () => {\n      const posts = await axios.get(\"/posts/\" + id);\n      setPost(posts.data);\n      setTitle(posts.data.title);\n      setDesc(posts.data.desc);\n      setPostId(posts.data._id);\n      const comments = await axios.get(`/comment/${posts.data._id}`);\n      console.log(comments);\n      setComments(comments.data);\n      setReplies(comments.data);\n      const replies = await axios.get(`/comment/replies/${posts.data._id}`);\n      console.log(replies);\n    };\n\n    getPost();\n  }, [id]);\n  const [openError, setOpenError] = React.useState(false);\n  const [error, setError] = React.useState(\"\");\n\n  const handleError = () => {\n    setOpenError(!openError);\n  };\n\n  const Alert = /*#__PURE__*/React.forwardRef(function Alert(props, ref) {\n    return /*#__PURE__*/_jsxDEV(MuiAlert, {\n      elevation: 6,\n      ref: ref,\n      variant: \"filled\",\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 16\n    }, this);\n  });\n  const PF = \"http://localhost:5000/images/\";\n  const useStyles = makeStyles(theme => ({\n    writeImg: {\n      width: \"100%\",\n      height: \"250px\",\n      borderRadius: \"10px\",\n      objectFit: \"cover\",\n      marginTop: \"2%\"\n    },\n    body: {\n      width: \"80%\",\n      marginLeft: \"5%\"\n    },\n    markdown: {\n      width: \"60vw\",\n      margin: '1px'\n    },\n    commentHeader: {\n      display: 'flex',\n      flexDirection: \"row\",\n      backgroundColor: \"#d6d6d4\",\n      width: \"100%\"\n    },\n    commentBody: {\n      margin: '1px',\n      borderStyle: \"solid\",\n      borderColor: \"#d6d6d4\",\n      borderRadius: \"15px\",\n      width: \"100%\"\n    },\n    replyBody: {\n      marginLeft: '5%',\n      marginTop: \"10px\",\n      marginBottom: \"10px\",\n      borderStyle: \"solid\",\n      borderColor: \"#d6d6d4\",\n      borderRadius: \"15px\",\n      width: \"95%\"\n    },\n    line: {\n      borderLeft: \"solid\"\n    },\n    addBody: {\n      margin: '1px',\n      width: \"100%\"\n    },\n    addCommentBody: {\n      flexDirection: \"row\",\n      margin: '1px'\n    },\n    addCommentButton: {\n      backgroundColor: \"#2195ed\"\n    },\n    textArea: {\n      margin: '1px',\n      width: \"100%\"\n    },\n    commentSection: {\n      display: 'flex',\n      flexDirection: \"column\",\n      width: \"100%\"\n    },\n    commentText: {\n      margin: \"1%\"\n    },\n    commentName: {\n      color: \"#2195ed\",\n      marginLeft: \"1%\",\n      marginRight: \"2%\"\n    },\n    commentWrite: {\n      width: \"50%\"\n    },\n    arrow: {\n      borderLeft: \"Solid\",\n      borderWidth: \"1px\"\n    }\n  }));\n  const [comments, setComments] = useState([]);\n  const [replies, setReplies] = useState([\"hey\", \"2\"]);\n  const [reply, setReply] = useState(false);\n  const [replyTo, setReplyTo] = useState(\"new\");\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [content, setContent] = useState(null);\n\n  const handleComment = async e => {\n    const newComment = {\n      name,\n      email,\n      postId,\n      content,\n      replyPerson\n    };\n\n    try {\n      console.log(name);\n      console.log(email);\n      console.log(content);\n      await axios.post(\"/comment\", newComment);\n      console.log(\"bingo\");\n      window.location.replace(\"/post/\" + postId);\n    } catch (err) {}\n  };\n\n  function ReplyTernary(props) {\n    if (reply) {\n      console.log(props.commentId);\n      console.log(replyTo);\n\n      if (replyTo === props.commentId) {\n        return /*#__PURE__*/_jsxDEV(AddComment, {\n          reply: replyTo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 14\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 18\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 16\n    }, this);\n  }\n\n  function DisplayReplies(props) {\n    let filter = [];\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"hey\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 9\n    }, this);\n  }\n\n  function AddComment(props) {\n    _s();\n\n    const [replyTo, setReplyTo] = useState(props.replyTo);\n    console.log(replyTo);\n    const [name, setName] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [content, setContent] = useState(null);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.body,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.addCommentBody,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: classes.inputInfo,\n          value: name,\n          onChange: e => setName(e.target.value),\n          type: \"text\",\n          placeholder: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: classes.inputInfo,\n          value: email,\n          onChange: e => setEmail(e.target.value),\n          type: \"text\",\n          placeholder: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: content,\n          onChange: e => setContent(e.target.value),\n          className: classes.textArea,\n          placeholder: \"Join the discussion!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          const newComment = {\n            name,\n            email,\n            postId,\n            content,\n            replyTo\n          };\n\n          try {\n            console.log(name);\n            console.log(email);\n            console.log(content);\n            console.log(replyTo);\n            axios.post(\"/comment\", newComment);\n            console.log(\"bingo\");\n            window.location.replace(\"/post/\" + postId);\n          } catch (err) {}\n        },\n        className: classes.commentButton,\n        children: \"Add Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 16\n    }, this);\n  }\n\n  _s(AddComment, \"GQCsqYTMGL7BrPZRqlJccbsoR4c=\");\n\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.body,\n    children: [/*#__PURE__*/_jsxDEV(Snackbar, {\n      open: openError,\n      autoHideDuration: 6000,\n      onClose: handleError,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleError,\n        severity: \"success\",\n        sx: {\n          width: \"100%\"\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.body,\n      children: [post.photo && /*#__PURE__*/_jsxDEV(\"img\", {\n        className: classes.writeImg,\n        src: PF + post.photo,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n        className: classes.markdown,\n        children: desc\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.commentSection,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.body,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Comments\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 9\n          }, this), comments.map(commentss => {\n            if (comments.replyTo === \"new\") return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes.commentBody,\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: classes.commentHeader,\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    className: classes.commentName,\n                    children: comments.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 371,\n                    columnNumber: 13\n                  }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 372,\n                    columnNumber: 13\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: new Date(comments.createdAt).toDateString()\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 373,\n                    columnNumber: 13\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    onClick: () => {\n                      setReply(!reply);\n                      setReplyTo(comments._id);\n                    },\n                    className: classes.commentName,\n                    children: \"Reply\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 375,\n                    columnNumber: 11\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 370,\n                  columnNumber: 13\n                }, this), /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n                  className: classes.commentText,\n                  children: comments.content\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 385,\n                  columnNumber: 13\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 369,\n                columnNumber: 18\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: classes.arrow\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 389,\n                  columnNumber: 5\n                }, this), /*#__PURE__*/_jsxDEV(ReplyTernary, {\n                  commentId: comments._id\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 390,\n                  columnNumber: 5\n                }, this), replies.map(reply => {\n                  if (reply.replyTo === comments._id) return /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: classes.replyBody,\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        className: classes.commentHeader,\n                        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                          className: classes.commentName,\n                          children: \"Ella\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 399,\n                          columnNumber: 10\n                        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 400,\n                          columnNumber: 10\n                        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                          children: new Date(comments.createdAt).toDateString()\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 401,\n                          columnNumber: 10\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 398,\n                        columnNumber: 10\n                      }, this), /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n                        className: classes.commentText,\n                        children: \"Test\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 407,\n                        columnNumber: 10\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 396,\n                      columnNumber: 15\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 411,\n                      columnNumber: 8\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 394,\n                    columnNumber: 20\n                  }, this);\n                  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 417,\n                    columnNumber: 16\n                  }, this);\n                })]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 388,\n                columnNumber: 7\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 424,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 367,\n              columnNumber: 13\n            }, this);\n            return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 429,\n              columnNumber: 19\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Add Comment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.body,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.addCommentBody,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: classes.inputInfo,\n          value: name,\n          onChange: e => setName(e.target.value),\n          type: \"text\",\n          placeholder: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: classes.inputInfo,\n          value: email,\n          onChange: e => setEmail(e.target.value),\n          type: \"text\",\n          placeholder: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: content,\n          onChange: e => setContent(e.target.value),\n          className: classes.textArea,\n          placeholder: \"Join the discussion!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleComment(),\n        className: classes.commentButton,\n        children: \"Add Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 333,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(Post, \"D9C4XMWsKiOD2MqS3j9vJ+89f4w=\", true, function () {\n  return [useParams];\n});\n\n_c = Post;\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/Users/23miec/Projects/TechInWithElla/techinwithella/src/MainPages/Post.js"],"names":["React","useState","useEffect","ReactMarkdown","MuiAlert","BrowserRouter","Router","useParams","Snackbar","set","FavoriteIcon","FavoriteBorderIcon","axios","AddIcon","IconButton","makeStyles","Button","Divider","ArrowForwardIcon","styled","MuiGrid","Grid","theme","width","typography","body2","margin","spacing","Post","id","post","setPost","title","setTitle","desc","setDesc","postId","setPostId","getPost","posts","get","data","_id","comments","console","log","setComments","setReplies","replies","openError","setOpenError","error","setError","handleError","Alert","forwardRef","props","ref","PF","useStyles","writeImg","height","borderRadius","objectFit","marginTop","body","marginLeft","markdown","commentHeader","display","flexDirection","backgroundColor","commentBody","borderStyle","borderColor","replyBody","marginBottom","line","borderLeft","addBody","addCommentBody","addCommentButton","textArea","commentSection","commentText","commentName","color","marginRight","commentWrite","arrow","borderWidth","reply","setReply","replyTo","setReplyTo","name","setName","email","setEmail","content","setContent","handleComment","e","newComment","replyPerson","window","location","replace","err","ReplyTernary","commentId","DisplayReplies","filter","AddComment","classes","inputInfo","target","value","commentButton","photo","map","commentss","Date","createdAt","toDateString"],"mappings":"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","sourcesContent":["\nimport React, { useState, useEffect } from 'react';\nimport ReactMarkdown from \"react-markdown\";\nimport MuiAlert from \"@mui/material/Alert\";\nimport { BrowserRouter as Router, useParams } from \"react-router-dom\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport { set } from \"@firebase/database\";\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport FavoriteBorderIcon from '@mui/icons-material/FavoriteBorder';\nimport axios from \"axios\"\nimport AddIcon from '@mui/icons-material/Add';\nimport IconButton from '@mui/material/IconButton'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Button } from \"@material-ui/core\";\nimport Divider from '@mui/material/Divider';\nimport ArrowForwardIcon from '@mui/icons-material/ArrowForward';\nimport { styled } from '@mui/material/styles';\nimport MuiGrid from '@mui/material/Grid';\n\n\nconst Grid = styled(MuiGrid)(({ theme }) => ({\n  width: '100%',\n  ...theme.typography.body2,\n  '& [role=\"separator\"]': {\n    margin: theme.spacing(0, 2),\n  },\n}));\n\nconst Post = (()=>{\n\n    \n  let { id } =\n  useParams();\n\n\n  const [post, setPost] = React.useState([]);\n  const [title, setTitle] = useState(\"\");\n  const [desc, setDesc] = useState(\"\");\n  const [postId, setPostId] = React.useState(\"\");\n  useEffect(() => {\n    const getPost = async () => {\n      const posts = await axios.get(\"/posts/\" + id);\n      setPost(posts.data);\n      setTitle(posts.data.title);\n      setDesc(posts.data.desc);\n      setPostId(posts.data._id)\n   \n        \n      const comments = await axios.get(`/comment/${posts.data._id}`);\n      console.log(comments)\n      setComments(comments.data)\n      setReplies(comments.data)\n      const replies = await axios.get(`/comment/replies/${posts.data._id}`);\n      console.log(replies)\n\n    \n     };\n\n    getPost();\n  }, [id]);\n\n\n    \n\n\n\n\n\n\n\n    const [openError, setOpenError] = React.useState(false);\n\n    const [error, setError] = React.useState(\"\");\n      const handleError = () => {\n        setOpenError(!openError);\n      };\n  \n    const Alert = React.forwardRef(function Alert(props, ref) {\n        return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n      });\n\n      const PF = \"http://localhost:5000/images/\";\n   \n\n      const useStyles = makeStyles((theme) => ({\n\n        writeImg:{\n          \n          width: \"100%\",\n          height: \"250px\",         \n           borderRadius: \"10px\",\n          objectFit: \"cover\",\n          marginTop:\"2%\",\n        },\n        body:{\n          \n          width:\"80%\",\n          marginLeft:\"5%\",\n      \n      \n        },\n        markdown:{\n          \n          width: \"60vw\",\n          margin:'1px',\n        \n      \n        },\n        commentHeader:{\n         display:'flex',\n         flexDirection:\"row\", \n     backgroundColor:\"#d6d6d4\",\n     width:\"100%\",\n        \n      \n        },\n        commentBody:{\n          \n          \n          margin:'1px',\n          borderStyle:\"solid\",\n          borderColor:\"#d6d6d4\",\n          borderRadius:\"15px\",\n          width:\"100%\",\n      \n\n        },\n        replyBody:{\n          \n          \n          marginLeft:'5%',\n          marginTop:\"10px\",   marginBottom:\"10px\",\n          borderStyle:\"solid\",\n          borderColor:\"#d6d6d4\",\n          borderRadius:\"15px\",\n          width:\"95%\",\n      \n\n        },\n\n        line:{\n          \n       borderLeft:\"solid\",\n\n\n        },\n\n        addBody:{\n          \n          \n          margin:'1px',\n      \n      \n          width:\"100%\",\n      \n      \n\n        },\n\n        addCommentBody:{\n          \n          flexDirection:\"row\", \n          margin:'1px',\n          \n \n      \n\n        },\n    addCommentButton:{\nbackgroundColor:\"#2195ed\"\n    },\n\n        textArea:{\n          \n          \n          margin:'1px',\n        \n      \n          width:\"100%\",\n      \n        },\n        commentSection:{\n          \n          display:'flex',\n          flexDirection:\"column\", \n          width:\"100%\",\n      \n        },\n        commentText:{\n          \n          margin:\"1%\",\n      \n        }\n        ,commentName:{\n          color:\"#2195ed\",\n          marginLeft: \"1%\",\n          marginRight:\"2%\",\n        }\n        ,  commentWrite:{\n          \n         width:\"50%\",\n      \n        }\n        ,  arrow:{\n         borderLeft:\"Solid\",\n         borderWidth:\"1px\",\n         }\n        \n\n        \n        \n      }))\n\n      const [comments, setComments] = useState([]);\n      const [replies, setReplies] = useState([\"hey\",\"2\"]);\n\n   \n      const [reply, setReply] = useState(false);\n      const [replyTo, setReplyTo] = useState(\"new\");\n      const [name, setName] = useState(\"\");\n      const [email, setEmail] = useState(\"\");\n      const [content, setContent] = useState(null);\n\n    \n  \n      const handleComment= async (e) => {\n      \n \n        const newComment = {\n          name,\n          email,\n          postId,\n          content,\n          replyPerson,\n        };\n        \n        try {\n          console.log(name)\n          console.log(email)\n          console.log(content)\n          await axios.post(\"/comment\", newComment);\n          console.log(\"bingo\")\n          window.location.replace(\"/post/\" + postId);\n        } catch (err) {}\n      };\n\n\n     \nfunction ReplyTernary(props) {\n    \n        if (reply) {\n          console.log(props.commentId)\n          console.log(replyTo)\n          if(replyTo===props.commentId){\n            return (\n             <AddComment reply={replyTo} ></AddComment>\n            )\n          }\n          return <div/>\n        }\n        return <div/>\n       \n      }\n    \n      \n      function DisplayReplies(props) {\n        let filter = []\n        \n\n          \n      return(\n        <p>hey</p>\n      )\n      }\n      \n\n        \n    \n   \n  \n\n      function AddComment(props) {\n    \n        const [replyTo, setReplyTo] = useState(props.replyTo);\n        console.log(replyTo)\n        const [name, setName] = useState(\"\");\n        const [email, setEmail] = useState(\"\");\n        const [content, setContent] = useState(null);\n\n     return(   <div className={classes.body} >\n    \n   \n    <div  className={classes.addCommentBody} >\n\n  <input className={classes.inputInfo}   value={name}\n  onChange={(e) => setName(e.target.value)} type=\"text\" placeholder=\"Name\"></input>\n      <input className={classes.inputInfo}   value={email}\n      onChange={(e) => setEmail(e.target.value)} type=\"text\"  placeholder=\"Email\"></input>\n   \n      <textarea value={content}\n      onChange={(e) => setContent(e.target.value)} className={classes.textArea}  placeholder= \"Join the discussion!\"/>\n   \n      </div>\n      <button   onClick={() => { \n\n\n\n        const newComment = {\n        name,\n        email,\n        postId,\n        content,\n        replyTo,\n      };\n      \n      try {\n        console.log(name)\n        console.log(email)\n        console.log(content)\n        console.log(replyTo)\n         axios.post(\"/comment\", newComment);\n        console.log(\"bingo\")\n        window.location.replace(\"/post/\" + postId);\n      \n      } catch (err) {}}} className={classes.commentButton}>Add Comment</button>\n  </div>)\n \n   }\n\n\n      const classes = useStyles()\n    return(\n        <div className={classes.body}>\n        <Snackbar\n        open={openError}\n        autoHideDuration={6000}\n        onClose={handleError}\n      >\n        <Alert\n          onClose={handleError}\n          severity=\"success\"\n          sx={{ width: \"100%\" }}\n        >\n\n         {error}\n        </Alert>\n      </Snackbar>\n      <div className={classes.body}>\n      {post.photo && <img className={classes.writeImg} src={PF + post.photo} alt=\"\" />}\n\n        <h2 >{title}</h2>\n       \n        <ReactMarkdown className={classes.markdown}  >{desc}</ReactMarkdown>\n  \n        </div>\n\n        <div className={classes.commentSection}>\n     \n        <div >\n\n\n        <div className={classes.body} >\n        <h3>Comments</h3>\n        {comments.map(commentss => {\n            if(comments.replyTo === \"new\")\n            return(\n            <div>\n \n                 <div className={classes.commentBody}>\n            <div className={classes.commentHeader}>\n            <p  className={classes.commentName}>{comments.name}</p>\n            <br/>\n            <p>{new Date(comments.createdAt).toDateString()}</p>\n\n          <Button  onClick={() => {\n            setReply(!reply)\n        \n            setReplyTo(comments._id)\n       \n             \n             }}\n             className={classes.commentName} >Reply</Button>\n            </div>\n       \n            <ReactMarkdown className={classes.commentText} >{comments.content}</ReactMarkdown>\n          \n          </div>\n      <div  >\n    <div className={classes.arrow}/>\n    <ReplyTernary commentId={comments._id}></ReplyTernary>\n\n          {replies.map(reply => {\n            if(reply.replyTo === comments._id)\n            return(<div >\n       \n              <div className={classes.replyBody}>\n              \n         <div className={classes.commentHeader}>\n         <p  className={classes.commentName}>{\"Ella\"}</p>\n         <br/>\n         <p>{new Date(comments.createdAt).toDateString()}</p>\n    \n  \n       \n         </div>\n    \n         <ReactMarkdown className={classes.commentText} >{\"Test\"}</ReactMarkdown>\n         \n       </div>\n   \n       <div>\n      \n       </div>\n  \n         </div>)\n\n         return<div/>\n            \n          }\n          \n        )}\n        \n        </div>\n          <div>\n      \n          </div>\n\n            </div>)\n            return<div/>\n        })}\n        \n        </div>\n          \n          </div>\n          \n        </div>\n        <p>Add Comment</p>\n        <div className={classes.body} >\n    \n   \n          <div  className={classes.addCommentBody} >\n\n        <input className={classes.inputInfo}   value={name}\n        onChange={(e) => setName(e.target.value)} type=\"text\" placeholder=\"Name\"></input>\n            <input className={classes.inputInfo}   value={email}\n            onChange={(e) => setEmail(e.target.value)} type=\"text\"  placeholder=\"Email\"></input>\n         \n            <textarea value={content}\n            onChange={(e) => setContent(e.target.value)} className={classes.textArea}  placeholder= \"Join the discussion!\"/>\n         \n            </div>\n            <button   onClick={() => handleComment()} className={classes.commentButton}>Add Comment</button>\n        </div>\n        </div>\n    )})\n\n    export default Post"]},"metadata":{},"sourceType":"module"}